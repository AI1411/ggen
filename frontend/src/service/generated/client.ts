/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * 農業災害支援システム API
 * 農業災害の報告と支援申請を管理するためのAPI
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  HandlerErrorResponse,
  HandlerErrorResponseDetail,
  HandlerPrefectureResponse
} from '../../types/generated/model'



/**
 * 都道府県の一覧を取得します。
 * @summary 都道府県一覧取得
 */
export const listPrefectures = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<HandlerPrefectureResponse[]>> => {
    
    return axios.default.get(
      `/prefectures`,options
    );
  }


export const getListPrefecturesQueryKey = () => {
    return [`/prefectures`] as const;
    }

    
export const getListPrefecturesQueryOptions = <TData = Awaited<ReturnType<typeof listPrefectures>>, TError = AxiosError<HandlerErrorResponse>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listPrefectures>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListPrefecturesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listPrefectures>>> = ({ signal }) => listPrefectures({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listPrefectures>>, TError, TData> & { queryKey: QueryKey }
}

export type ListPrefecturesQueryResult = NonNullable<Awaited<ReturnType<typeof listPrefectures>>>
export type ListPrefecturesQueryError = AxiosError<HandlerErrorResponse>

/**
 * @summary 都道府県一覧取得
 */
export const useListPrefectures = <TData = Awaited<ReturnType<typeof listPrefectures>>, TError = AxiosError<HandlerErrorResponse>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listPrefectures>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getListPrefecturesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * 都道府県コードを指定して、都道府県の詳細情報を取得します。
 * @summary 都道府県詳細取得
 */
export const getPrefecture = (
    code: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<HandlerPrefectureResponse>> => {
    
    return axios.default.get(
      `/prefectures/${code}`,options
    );
  }


export const getGetPrefectureQueryKey = (code: string,) => {
    return [`/prefectures/${code}`] as const;
    }

    
export const getGetPrefectureQueryOptions = <TData = Awaited<ReturnType<typeof getPrefecture>>, TError = AxiosError<HandlerErrorResponseDetail | HandlerErrorResponse>>(code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPrefecture>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPrefectureQueryKey(code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPrefecture>>> = ({ signal }) => getPrefecture(code, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPrefecture>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPrefectureQueryResult = NonNullable<Awaited<ReturnType<typeof getPrefecture>>>
export type GetPrefectureQueryError = AxiosError<HandlerErrorResponseDetail | HandlerErrorResponse>

/**
 * @summary 都道府県詳細取得
 */
export const useGetPrefecture = <TData = Awaited<ReturnType<typeof getPrefecture>>, TError = AxiosError<HandlerErrorResponseDetail | HandlerErrorResponse>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPrefecture>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetPrefectureQueryOptions(code,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




