// Code generated by MockGen. DO NOT EDIT.
// Source: prefecture_usecase.go
//
// Generated by this command:
//
//	mockgen -source=prefecture_usecase.go -destination=../../tests/mock/usecase/prefecture_usecase.mock.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	model "g_gen/internal/domain/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPrefectureUseCase is a mock of PrefectureUseCase interface.
type MockPrefectureUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockPrefectureUseCaseMockRecorder
}

// MockPrefectureUseCaseMockRecorder is the mock recorder for MockPrefectureUseCase.
type MockPrefectureUseCaseMockRecorder struct {
	mock *MockPrefectureUseCase
}

// NewMockPrefectureUseCase creates a new mock instance.
func NewMockPrefectureUseCase(ctrl *gomock.Controller) *MockPrefectureUseCase {
	mock := &MockPrefectureUseCase{ctrl: ctrl}
	mock.recorder = &MockPrefectureUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrefectureUseCase) EXPECT() *MockPrefectureUseCaseMockRecorder {
	return m.recorder
}

// GetPrefectureByCode mocks base method.
func (m *MockPrefectureUseCase) GetPrefectureByCode(ctx context.Context, code string) (*model.Prefecture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrefectureByCode", ctx, code)
	ret0, _ := ret[0].(*model.Prefecture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrefectureByCode indicates an expected call of GetPrefectureByCode.
func (mr *MockPrefectureUseCaseMockRecorder) GetPrefectureByCode(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrefectureByCode", reflect.TypeOf((*MockPrefectureUseCase)(nil).GetPrefectureByCode), ctx, code)
}

// ListPrefectures mocks base method.
func (m *MockPrefectureUseCase) ListPrefectures(ctx context.Context) ([]*model.Prefecture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrefectures", ctx)
	ret0, _ := ret[0].([]*model.Prefecture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrefectures indicates an expected call of ListPrefectures.
func (mr *MockPrefectureUseCaseMockRecorder) ListPrefectures(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrefectures", reflect.TypeOf((*MockPrefectureUseCase)(nil).ListPrefectures), ctx)
}
