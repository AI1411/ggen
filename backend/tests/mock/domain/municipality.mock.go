// Code generated by MockGen. DO NOT EDIT.
// Source: municipality.go
//
// Generated by this command:
//
//	mockgen -source=municipality.go -destination=../../../tests/mock/domain/municipality.mock.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	model "g_gen/internal/domain/model"

	gomock "go.uber.org/mock/gomock"
)

// MockMunicipality is a mock of Municipality interface.
type MockMunicipality struct {
	ctrl     *gomock.Controller
	recorder *MockMunicipalityMockRecorder
}

// MockMunicipalityMockRecorder is the mock recorder for MockMunicipality.
type MockMunicipalityMockRecorder struct {
	mock *MockMunicipality
}

// NewMockMunicipality creates a new mock instance.
func NewMockMunicipality(ctrl *gomock.Controller) *MockMunicipality {
	mock := &MockMunicipality{ctrl: ctrl}
	mock.recorder = &MockMunicipalityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMunicipality) EXPECT() *MockMunicipalityMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockMunicipality) FindAll(ctx context.Context) ([]*model.Municipality, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]*model.Municipality)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockMunicipalityMockRecorder) FindAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockMunicipality)(nil).FindAll), ctx)
}

// FindByID mocks base method.
func (m *MockMunicipality) FindByID(ctx context.Context, id int) (*model.Municipality, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*model.Municipality)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockMunicipalityMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockMunicipality)(nil).FindByID), ctx, id)
}

// FindByPrefectureCode mocks base method.
func (m *MockMunicipality) FindByPrefectureCode(ctx context.Context, prefectureCode string) ([]*model.Municipality, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPrefectureCode", ctx, prefectureCode)
	ret0, _ := ret[0].([]*model.Municipality)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPrefectureCode indicates an expected call of FindByPrefectureCode.
func (mr *MockMunicipalityMockRecorder) FindByPrefectureCode(ctx, prefectureCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPrefectureCode", reflect.TypeOf((*MockMunicipality)(nil).FindByPrefectureCode), ctx, prefectureCode)
}
