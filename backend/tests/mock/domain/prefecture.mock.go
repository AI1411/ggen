// Code generated by MockGen. DO NOT EDIT.
// Source: prefecture.go
//
// Generated by this command:
//
//	mockgen -source=prefecture.go -destination=../../../tests/mock/domain/prefecture.mock.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	model "g_gen/internal/domain/model"

	gomock "go.uber.org/mock/gomock"
)

// MockPrefectureRepository is a mock of PrefectureRepository interface.
type MockPrefectureRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPrefectureRepositoryMockRecorder
}

// MockPrefectureRepositoryMockRecorder is the mock recorder for MockPrefectureRepository.
type MockPrefectureRepositoryMockRecorder struct {
	mock *MockPrefectureRepository
}

// NewMockPrefectureRepository creates a new mock instance.
func NewMockPrefectureRepository(ctrl *gomock.Controller) *MockPrefectureRepository {
	mock := &MockPrefectureRepository{ctrl: ctrl}
	mock.recorder = &MockPrefectureRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrefectureRepository) EXPECT() *MockPrefectureRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockPrefectureRepository) FindAll(ctx context.Context) ([]*model.Prefecture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]*model.Prefecture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockPrefectureRepositoryMockRecorder) FindAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockPrefectureRepository)(nil).FindAll), ctx)
}

// FindByCode mocks base method.
func (m *MockPrefectureRepository) FindByCode(ctx context.Context, code string) (*model.Prefecture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCode", ctx, code)
	ret0, _ := ret[0].(*model.Prefecture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCode indicates an expected call of FindByCode.
func (mr *MockPrefectureRepositoryMockRecorder) FindByCode(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCode", reflect.TypeOf((*MockPrefectureRepository)(nil).FindByCode), ctx, code)
}
