// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"g_gen/internal/domain/model"
)

func newWorkCategory(db *gorm.DB, opts ...gen.DOOption) workCategory {
	_workCategory := workCategory{}

	_workCategory.workCategoryDo.UseDB(db, opts...)
	_workCategory.workCategoryDo.UseModel(&model.WorkCategory{})

	tableName := _workCategory.workCategoryDo.TableName()
	_workCategory.ALL = field.NewAsterisk(tableName)
	_workCategory.ID = field.NewInt32(tableName, "id")
	_workCategory.CategoryName = field.NewString(tableName, "category_name")
	_workCategory.IconName = field.NewString(tableName, "icon_name")
	_workCategory.SortOrder = field.NewInt32(tableName, "sort_order")
	_workCategory.IsActive = field.NewBool(tableName, "is_active")

	_workCategory.fillFieldMap()

	return _workCategory
}

type workCategory struct {
	workCategoryDo

	ALL          field.Asterisk
	ID           field.Int32  // 工種区分ID（主キー、自動掲番）
	CategoryName field.String // 工種区分名（漢字表記）
	IconName     field.String // アイコンファイル名
	SortOrder    field.Int32  // 表示順序
	IsActive     field.Bool   // 有効フラグ（TRUE: 有効、FALSE: 無効）

	fieldMap map[string]field.Expr
}

func (w workCategory) Table(newTableName string) *workCategory {
	w.workCategoryDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w workCategory) As(alias string) *workCategory {
	w.workCategoryDo.DO = *(w.workCategoryDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *workCategory) updateTableName(table string) *workCategory {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt32(table, "id")
	w.CategoryName = field.NewString(table, "category_name")
	w.IconName = field.NewString(table, "icon_name")
	w.SortOrder = field.NewInt32(table, "sort_order")
	w.IsActive = field.NewBool(table, "is_active")

	w.fillFieldMap()

	return w
}

func (w *workCategory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *workCategory) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 5)
	w.fieldMap["id"] = w.ID
	w.fieldMap["category_name"] = w.CategoryName
	w.fieldMap["icon_name"] = w.IconName
	w.fieldMap["sort_order"] = w.SortOrder
	w.fieldMap["is_active"] = w.IsActive
}

func (w workCategory) clone(db *gorm.DB) workCategory {
	w.workCategoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w workCategory) replaceDB(db *gorm.DB) workCategory {
	w.workCategoryDo.ReplaceDB(db)
	return w
}

type workCategoryDo struct{ gen.DO }

type IWorkCategoryDo interface {
	gen.SubQuery
	Debug() IWorkCategoryDo
	WithContext(ctx context.Context) IWorkCategoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWorkCategoryDo
	WriteDB() IWorkCategoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWorkCategoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWorkCategoryDo
	Not(conds ...gen.Condition) IWorkCategoryDo
	Or(conds ...gen.Condition) IWorkCategoryDo
	Select(conds ...field.Expr) IWorkCategoryDo
	Where(conds ...gen.Condition) IWorkCategoryDo
	Order(conds ...field.Expr) IWorkCategoryDo
	Distinct(cols ...field.Expr) IWorkCategoryDo
	Omit(cols ...field.Expr) IWorkCategoryDo
	Join(table schema.Tabler, on ...field.Expr) IWorkCategoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWorkCategoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWorkCategoryDo
	Group(cols ...field.Expr) IWorkCategoryDo
	Having(conds ...gen.Condition) IWorkCategoryDo
	Limit(limit int) IWorkCategoryDo
	Offset(offset int) IWorkCategoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWorkCategoryDo
	Unscoped() IWorkCategoryDo
	Create(values ...*model.WorkCategory) error
	CreateInBatches(values []*model.WorkCategory, batchSize int) error
	Save(values ...*model.WorkCategory) error
	First() (*model.WorkCategory, error)
	Take() (*model.WorkCategory, error)
	Last() (*model.WorkCategory, error)
	Find() ([]*model.WorkCategory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WorkCategory, err error)
	FindInBatches(result *[]*model.WorkCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WorkCategory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWorkCategoryDo
	Assign(attrs ...field.AssignExpr) IWorkCategoryDo
	Joins(fields ...field.RelationField) IWorkCategoryDo
	Preload(fields ...field.RelationField) IWorkCategoryDo
	FirstOrInit() (*model.WorkCategory, error)
	FirstOrCreate() (*model.WorkCategory, error)
	FindByPage(offset int, limit int) (result []*model.WorkCategory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWorkCategoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w workCategoryDo) Debug() IWorkCategoryDo {
	return w.withDO(w.DO.Debug())
}

func (w workCategoryDo) WithContext(ctx context.Context) IWorkCategoryDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w workCategoryDo) ReadDB() IWorkCategoryDo {
	return w.Clauses(dbresolver.Read)
}

func (w workCategoryDo) WriteDB() IWorkCategoryDo {
	return w.Clauses(dbresolver.Write)
}

func (w workCategoryDo) Session(config *gorm.Session) IWorkCategoryDo {
	return w.withDO(w.DO.Session(config))
}

func (w workCategoryDo) Clauses(conds ...clause.Expression) IWorkCategoryDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w workCategoryDo) Returning(value interface{}, columns ...string) IWorkCategoryDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w workCategoryDo) Not(conds ...gen.Condition) IWorkCategoryDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w workCategoryDo) Or(conds ...gen.Condition) IWorkCategoryDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w workCategoryDo) Select(conds ...field.Expr) IWorkCategoryDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w workCategoryDo) Where(conds ...gen.Condition) IWorkCategoryDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w workCategoryDo) Order(conds ...field.Expr) IWorkCategoryDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w workCategoryDo) Distinct(cols ...field.Expr) IWorkCategoryDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w workCategoryDo) Omit(cols ...field.Expr) IWorkCategoryDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w workCategoryDo) Join(table schema.Tabler, on ...field.Expr) IWorkCategoryDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w workCategoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWorkCategoryDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w workCategoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IWorkCategoryDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w workCategoryDo) Group(cols ...field.Expr) IWorkCategoryDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w workCategoryDo) Having(conds ...gen.Condition) IWorkCategoryDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w workCategoryDo) Limit(limit int) IWorkCategoryDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w workCategoryDo) Offset(offset int) IWorkCategoryDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w workCategoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWorkCategoryDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w workCategoryDo) Unscoped() IWorkCategoryDo {
	return w.withDO(w.DO.Unscoped())
}

func (w workCategoryDo) Create(values ...*model.WorkCategory) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w workCategoryDo) CreateInBatches(values []*model.WorkCategory, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w workCategoryDo) Save(values ...*model.WorkCategory) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w workCategoryDo) First() (*model.WorkCategory, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkCategory), nil
	}
}

func (w workCategoryDo) Take() (*model.WorkCategory, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkCategory), nil
	}
}

func (w workCategoryDo) Last() (*model.WorkCategory, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkCategory), nil
	}
}

func (w workCategoryDo) Find() ([]*model.WorkCategory, error) {
	result, err := w.DO.Find()
	return result.([]*model.WorkCategory), err
}

func (w workCategoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WorkCategory, err error) {
	buf := make([]*model.WorkCategory, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w workCategoryDo) FindInBatches(result *[]*model.WorkCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w workCategoryDo) Attrs(attrs ...field.AssignExpr) IWorkCategoryDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w workCategoryDo) Assign(attrs ...field.AssignExpr) IWorkCategoryDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w workCategoryDo) Joins(fields ...field.RelationField) IWorkCategoryDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w workCategoryDo) Preload(fields ...field.RelationField) IWorkCategoryDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w workCategoryDo) FirstOrInit() (*model.WorkCategory, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkCategory), nil
	}
}

func (w workCategoryDo) FirstOrCreate() (*model.WorkCategory, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkCategory), nil
	}
}

func (w workCategoryDo) FindByPage(offset int, limit int) (result []*model.WorkCategory, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w workCategoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w workCategoryDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w workCategoryDo) Delete(models ...*model.WorkCategory) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *workCategoryDo) withDO(do gen.Dao) *workCategoryDo {
	w.DO = *do.(*gen.DO)
	return w
}
